#name: Build and Deploy to EC2
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout source code
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Set up Java environment with Java 21
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      # 3. Build the Spring Boot project
#      - name: Build Spring Boot App
#        run: ./mvnw clean package -DskipTests
#
#      # 4. Build Docker image using the provided Dockerfile
#      - name: Build Docker Image
#        run: docker build -t my-spring-boot-app:latest .
#
#      # 5. Save the Docker image as a tar file
#      - name: Save Docker Image
#        run: docker save my-spring-boot-app:latest | gzip > my-spring-boot-app.tar.gz
#
#      # 6. Copy the tar file to EC2
#      - name: Copy Image to EC2
#        uses: appleboy/scp-action@v0.2.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#          source: "my-spring-boot-app.tar.gz"
#          target: "~/"
#
#      # 7. Load and run the Docker container on EC2
#      - name: Run Docker Container on EC2
#        uses: appleboy/ssh-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#          script: |
#            docker load < ~/my-spring-boot-app.tar.gz
#            docker stop spring-boot-app || true
#            docker rm spring-boot-app || true
#            docker run -d --name spring-boot-app -p 8080:8080 my-spring-boot-app:latest
